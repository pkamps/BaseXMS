Logging
---------
use zend framework
added functionality:
- output writes to files/page/firebug
- logging config per user
- logging per IP
- logging identifiers

MVC Zend
--------------
I hock into the MVC Zend Framework. But the logic of building the response object is in BaseXMS.
BaseXMS is building a response object and sends it back to the Zend MVC. Zend just translate the response object
into an Zend response.
I don't think I need to use the MVC - I really don't use a lot of it's features. I think I'd be better of to only use
the ModuleManager and the ServiceManager

BaseXMS Objects
--------------------
I think that's an old concept and I moved away from it. I don't BaseXMS Object but an API to read/write contentobjects and node info.
The raw content in contentobjects are very individual and the RequestHandle should know what to do with it.

"The factory takes the xml element from the content tag." - old text, remove it

Persistent Object API
========================
The goal is to have a simple API that allows me to store/read XML under the "node/content" tag. Therefore I need to be able to add/delete
containers ("node" tags). Each "node" container has "properties" tag to specify all access paths.
The idea is to only allow adding and deleting entire "node" containers. Then have additional API methods to update/read the "properties"
and "content" tags.

Build an API to handle write/read of content objects and path nodes.


No templates but parsing xhtml structure
===========================================
I decided to not use a template engine that executes the template code from top to bottom. Instead I'm using a UiComposer
which build the xhtml dom document (or any kind of output really). It searches a given xml structure for "include" tags.
Each "include" tag creates another UiComposer object which is responsible to render xml which will replace the "include"
tag. The overall order of execution can be described as multiple run throughs of the UiComposer to search for "include"
tags until all "include" tags are parsed. For example, a parsed include tag can result in more "include" tags which will
be rendered in the next run through.
The UiComponent which is responsible to render a specific "include" tag stores the render result as an object variable.
If the UiComponent implements the Cachable class, the render result will be cached.

Settings
=============
The inspect module has a page to dump out settings "/admin/settings".

Setting files:
- BaseXMS ignores application.config.php (pure Zend settings)
- merges all module.config.php files (module order matters here)
- siteaccess class has a method addConfig to set additional settings
- Override with global settings (not sure if I have that implemented)

Use Cases:
a) DB settings for all siteaccesses
Don't set it in siteaccess contenxt, just in a custom Zend module

b) Custom design in a siteaccess
Add config in context of the siteaccess

c) Have base config
Add it to the module BaseXMSZend

Things to consider:
Do I need the ability to override settings for a specific request?
It probably would be cleaner to have the site context decide which zend module to load but I don't think it's easy to
override that logic (but I haven't check).


Execution Flow
=================
1) public/index.php
   - gets zend application instance
   - BaseXML overrides the standard zend application
   
2) application instance
   - add a onDispatch listener
   - gets a siteaccess instance
   - asks the siteaccess instance for a Response 
   
3) siteaccess instance
   - get the configuration
   - setups a ServiceManager
   - uses the UrlDispatcher in order to resolve the request
   - a valid request create a RequestHandler instance and gets a reference ID to the object in XML data
   - ask the RequestHandler for a response
   
4) The RequestHandler
   - just send back a response object or
   - fetches the content from the XML data
   - use UIComponents to parse the response content
   
   
TODO: I think the siteaccess and request handler should take the application object and add more details to it.
In general I should try to pass along the service object (which contains the application).


event trigger versus config files
====================================
The log solution uses a trigger event to register log writers. Other factories like the siteaccesses use the settings.
Should I go a pure PHP way or should I work with settings?
