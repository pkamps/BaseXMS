Logging
---------
use zend framework
added functionality:
- output writes to files/page/firebug
- logging config per user
- logging per IP
- logging identifiers

MVC Zend
--------------
I hock into the MVC Zend Framework. But the logic of building the response object is in BaseXMS.
BaseXMS is building a response object and sends it back to the Zend MVC. Zend just translate the response object
into an Zend response.

BaseXMS Objects
--------------------
The factory takes the xml element from the content tag.

Persistent Object API
========================
Build an API to handle write/read of content objects and path nodes.


No templates but parsing xhtml structure
===========================================
I decided to not use a template engine that executes the template code from top to bottom. Instead I'm using a UiComposer
which build the xhtml dom document recursively. Each recursive step is using a UiComponent to build parts of the dom document.
That part could use "<include type="article" />" tags to trigger another recursive step in the UiComposer.


Settings
=============
The inspect module has a page to dump out settings "/admin/settings".

Setting files:
- BaseXMS ignores application.config.php (pure Zend settings)
- merges all module.config.php files (module order matters here)
- siteaccess class has a method addConfig to set additional settings
- Override with global settings (not sure if I have that implemented)

Use Cases:
a) DB settings for all siteaccesses
Don't set it in siteaccess contenxt, just in a custom Zend module

b) Custom design in a siteaccess
Add config in context of the siteaccess

c) Have base config
Add it to the module BaseXMSZend

Things to consider:
Do I need the ability to override settings for a specific request?
It probably would be cleaner to have the site context decide which zend module to load but I don't think it's easy to
override that logic (but I haven't check).


Execution Flow
=================
1) public/index.php
   - gets zend application instance
   - BaseXML overrides the standard zend application
   
2) application instance
   - add a onDispatch listener
   - gets a siteaccess instance
   - asks the siteaccess instance for a Response 
   
3) siteaccess instance
   - get the configuration
   - setups a ServiceManager
   - uses the UrlDispatcher in order to resolve the request
   - a valid request create a RequestHandler instance and gets a reference ID to the object in XML data
   - ask the RequestHandler for a response
   
4) The RequestHandler
   - just send back a response object or
   - fetches the content from the XML data
   - use UIComponents to parse the response content
   
   
TODO: I think the siteaccess and request handler should take the application object and add more details to it.
In general I should try to pass along the service object (which contains the application).
